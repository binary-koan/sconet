// This file is generated by graphql-codegen
// DO NOT EDIT THIS FILE DIRECTLY
export const typeDefs = [
  "type Account {\n  id: String!\n  name: String!\n  transactions: [Transaction!]!\n}\n\ntype Query {\n  accounts: [Account!]! @authenticated\n  account(id: String!): Account @authenticated\n}\n\ninput CreateAccountInput {\n  name: String!\n}\n\ninput UpdateAccountInput {\n  name: String\n}\n\ntype Mutation {\n  createAccount(input: CreateAccountInput!): Account! @authenticated\n  updateAccount(id: String!, input: UpdateAccountInput!): Account! @authenticated\n  deleteAccount(id: String!): Account! @authenticated\n}\n",
  "type MonthBudget {\n  id: String!\n  month: Int!\n  year: Int!\n\n  income: Money!\n  totalSpending: Money!\n  difference: Money!\n  regularCategories: CategoryBudgetGroup!\n  irregularCategories: CategoryBudgetGroup!\n}\n\ntype CategoryBudgetGroup {\n  totalSpending: Money!\n  categories: [CategoryBudget!]!\n}\n\ntype CategoryBudget {\n  id: String!\n  categoryId: String\n  category: Category\n  amountSpent: Money!\n}\n\ntype Query {\n  budget(\n    year: Int!\n    month: Int!\n    timezoneOffset: UtcOffset = \"+00:00\"\n    currencyCode: String\n  ): MonthBudget! @authenticated\n}\n",
  "type Category {\n  id: String!\n  name: String!\n  color: String!\n  icon: String!\n  isRegular: Boolean!\n  budget(currencyCode: String, date: Date): Money\n  budgetCurrency: Currency\n  sortOrder: Int\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype Query {\n  categories: [Category!]! @authenticated\n  category(id: String!): Category @authenticated\n}\n\ninput CreateCategoryInput {\n  name: String!\n  color: String!\n  icon: String!\n  isRegular: Boolean!\n  budgetCurrencyCode: String\n  budget: Int\n}\n\ninput UpdateCategoryInput {\n  name: String\n  color: String\n  icon: String\n  isRegular: Boolean\n  budgetCurrencyCode: String\n  budget: Int\n}\n\ntype Mutation {\n  createCategory(input: CreateCategoryInput!): Category! @authenticated\n  updateCategory(id: String!, input: UpdateCategoryInput!): Category! @authenticated\n  deleteCategory(id: String!): Category! @authenticated\n  reorderCategories(orderedIds: [String!]!): [Category!]! @authenticated\n}\n",
  "type Currency {\n  code: CurrencyCode!\n  name: String!\n  symbol: String!\n  decimalDigits: Int!\n  exchangeRate(toCode: String!): Float\n}\n\ntype Query {\n  currencies: [Currency!]! @authenticated\n  currency(code: String!): Currency @authenticated\n}\n\ninput CreateCurrencyInput {\n  code: CurrencyCode!\n  symbol: String!\n  decimalDigits: Int!\n}\n\ninput UpdateCurrencyInput {\n  symbol: String!\n  decimalDigits: Int!\n}\n\ntype Mutation {\n  favoriteCurrency(code: String!): Currency! @authenticated\n  unfavoriteCurrency(code: String!): Currency! @authenticated\n}\n",
  "type Money {\n  integerAmount: Int!\n  decimalAmount: Float!\n  formatted: String!\n  formattedShort: String!\n}\n",
  "type Mutation {\n  login(email: String!, password: String!, turnstileToken: String!): String!\n\n  generateCredentialLoginOptions(userId: String!): JSON!\n  loginViaCredential(response: JSON!): String!\n\n  changePassword(oldPassword: String!, newPassword: String!): Boolean! @authenticated\n\n  generateNewToken: String! @authenticated\n\n  registerCredential: JSON! @authenticated\n  verifyCredentialRegistration(response: JSON!, device: String!): Boolean! @authenticated\n\n  deleteCredential(id: String!): UserCredential! @authenticated\n}\n\ntype Query {\n  currentUser: CurrentUser\n}\n\ntype CurrentUser {\n  id: String!\n  email: String!\n  registeredCredentials: [UserCredential!]!\n}\n\ntype UserCredential {\n  id: String!\n  device: String!\n  createdAt: Date!\n}\n",
  "type Transaction {\n  id: String!\n  date: Date!\n  memo: String!\n  originalMemo: String!\n  amount(currencyCode: String): Money!\n  currency: Currency!\n  currencyCode: String!\n  category: Category\n  categoryId: String\n  account: Account!\n  accountId: String!\n  includeInReports: Boolean!\n  splitFromId: String\n  splitFrom: Transaction\n  splitTo: [Transaction!]!\n}\n\ntype PaginatedTransactions {\n  data: [Transaction!]!\n  nextOffset: String\n  totalCount: Int!\n}\n\ninput TransactionFilter {\n  dateFrom: Date\n  dateUntil: Date\n  minAmount: Int\n  maxAmount: Int\n  keyword: String\n  categoryIds: [String]\n}\n\ntype DailyTransactions {\n  date: Date\n  totalSpent(currencyCode: String): Money!\n  transactions: [Transaction!]!\n}\n\ntype Query {\n  transactions(\n    limit: Int = 1000\n    offset: String\n    filter: TransactionFilter\n  ): PaginatedTransactions! @authenticated\n\n  transactionsByDay(dateFrom: Date!, dateUntil: Date!): [DailyTransactions!]! @authenticated\n\n  transaction(id: String!): Transaction @authenticated\n}\n\ninput CreateTransactionInput {\n  memo: String!\n  amount: Int!\n  currencyCode: String!\n  categoryId: String\n  accountId: String!\n  date: Date\n  includeInReports: Boolean\n}\n\ninput UpdateTransactionInput {\n  memo: String\n  amount: Int\n  currencyCode: String\n  categoryId: String\n  accountId: String\n  date: Date\n  includeInReports: Boolean\n}\n\ninput SplitTransactionItem {\n  amount: Int!\n  memo: String\n}\n\ntype Mutation {\n  createTransaction(input: CreateTransactionInput!): Transaction! @authenticated\n  updateTransaction(id: String!, input: UpdateTransactionInput!): Transaction! @authenticated\n  deleteTransaction(id: String!): Transaction! @authenticated\n  splitTransaction(id: String!, splits: [SplitTransactionItem!]!): Transaction! @authenticated\n}\n",
  "scalar Date\nscalar DateTime\nscalar JSON\nscalar CurrencyCode\nscalar UtcOffset\n\ndirective @authenticated on FIELD_DEFINITION\n"
]
