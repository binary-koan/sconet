type Transaction {
  id: String!
  date: Date!
  memo: String!
  originalMemo: String!
  amount(currencyId: String): Money!
  currency: Currency!
  currencyId: String!
  category: Category
  categoryId: String
  accountMailbox: AccountMailbox!
  accountMailboxId: String!
  includeInReports: Boolean!
  splitFromId: String
  splitFrom: Transaction
  splitTo: [Transaction!]!
}

type PaginatedTransactions {
  data: [Transaction!]!
  nextOffset: String
  totalCount: Int!
}

input TransactionFilter {
  dateFrom: Date
  dateUntil: Date
  minAmount: Int
  maxAmount: Int
  keyword: String
  categoryIds: [String]
}

type DailyTransactions {
  date: Date
  totalSpent(currencyId: String): Money!
  transactions: [Transaction!]!
}

type Query {
  transactions(
    limit: Int = 1000
    offset: String
    filter: TransactionFilter
  ): PaginatedTransactions! @authenticated

  transactionsByDay(dateFrom: Date!, dateUntil: Date!): [DailyTransactions!]! @authenticated

  transaction(id: String!): Transaction @authenticated
}

input CreateTransactionInput {
  memo: String!
  amount: Int!
  currencyId: String!
  categoryId: String
  accountMailboxId: String!
  date: Date
  includeInReports: Boolean
}

input UpdateTransactionInput {
  memo: String
  amount: Int
  currencyId: String
  categoryId: String
  accountMailboxId: String
  date: Date
  includeInReports: Boolean
}

input SplitTransactionItem {
  amount: Int!
  memo: String
}

type Mutation {
  createTransaction(input: CreateTransactionInput!): Transaction! @authenticated
  updateTransaction(id: String!, input: UpdateTransactionInput!): Transaction! @authenticated
  deleteTransaction(id: String!): Transaction! @authenticated
  splitTransaction(id: String!, splits: [SplitTransactionItem!]!): Transaction! @authenticated
}
