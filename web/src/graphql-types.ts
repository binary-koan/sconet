export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded date */
  ISO8601Date: { input: any; output: any; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
  /** Represents untyped JSON */
  JSON: { input: any; output: any; }
};

export type Account = {
  __typename?: 'Account';
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency: Currency;
  favourite: Scalars['Boolean']['output'];
  hasTransactions: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  sortOrder: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of AccountArchive */
export type AccountArchiveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AccountArchive. */
export type AccountArchivePayload = {
  __typename?: 'AccountArchivePayload';
  account: Account;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AccountCreate */
export type AccountCreateInput = {
  accountInput: AccountInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of AccountCreate. */
export type AccountCreatePayload = {
  __typename?: 'AccountCreatePayload';
  account: Account;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AccountDelete */
export type AccountDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AccountDelete. */
export type AccountDeletePayload = {
  __typename?: 'AccountDeletePayload';
  account: Account;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

export type AccountInput = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  favourite?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of AccountUpdate */
export type AccountUpdateInput = {
  accountInput: AccountInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AccountUpdate. */
export type AccountUpdatePayload = {
  __typename?: 'AccountUpdatePayload';
  account: Account;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AccountsReorder */
export type AccountsReorderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  orderedIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of AccountsReorder. */
export type AccountsReorderPayload = {
  __typename?: 'AccountsReorderPayload';
  accounts: Array<Account>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

export type AnnualBalance = {
  __typename?: 'AnnualBalance';
  currency: Currency;
  difference: Money;
  id: Scalars['ID']['output'];
  income: Money;
  months: Array<MonthBalance>;
  totalSpending: Money;
  year: Scalars['Int']['output'];
};

/** Autogenerated input type of CategoriesReorder */
export type CategoriesReorderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  orderedIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of CategoriesReorder. */
export type CategoriesReorderPayload = {
  __typename?: 'CategoriesReorderPayload';
  categories: Array<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

export type Category = {
  __typename?: 'Category';
  budget?: Maybe<CategoryBudget>;
  budgets: Array<CategoryBudget>;
  color: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  hasTransactions: Scalars['Boolean']['output'];
  icon: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isRegular: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  sortOrder: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type CategoryBudgetArgs = {
  date: Scalars['ISO8601Date']['input'];
};

/** Autogenerated input type of CategoryArchive */
export type CategoryArchiveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CategoryArchive. */
export type CategoryArchivePayload = {
  __typename?: 'CategoryArchivePayload';
  category: Category;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

export type CategoryBudget = {
  __typename?: 'CategoryBudget';
  budget: Money;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency: Currency;
  dateFrom: Scalars['ISO8601Date']['output'];
  dateTo?: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type CategoryBudgetBudgetArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  date?: InputMaybe<Scalars['ISO8601Date']['input']>;
};

export type CategoryBudgetGroup = {
  __typename?: 'CategoryBudgetGroup';
  categories: Array<CategoryBudgetSpending>;
  totalSpending: Money;
};

export type CategoryBudgetSpending = {
  __typename?: 'CategoryBudgetSpending';
  amountSpent: Money;
  category?: Maybe<Category>;
  id: Scalars['ID']['output'];
  remainingBudget?: Maybe<Money>;
};

/** Autogenerated input type of CategoryCreate */
export type CategoryCreateInput = {
  categoryInput: CategoryInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CategoryCreate. */
export type CategoryCreatePayload = {
  __typename?: 'CategoryCreatePayload';
  category: Category;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CategoryDelete */
export type CategoryDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CategoryDelete. */
export type CategoryDeletePayload = {
  __typename?: 'CategoryDeletePayload';
  category: Category;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

export type CategoryInput = {
  budgetCents?: InputMaybe<Scalars['Int']['input']>;
  budgetCurrencyId?: InputMaybe<Scalars['ID']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  isRegular?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of CategoryUpdate */
export type CategoryUpdateInput = {
  categoryInput: CategoryInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CategoryUpdate. */
export type CategoryUpdatePayload = {
  __typename?: 'CategoryUpdatePayload';
  category: Category;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CredentialDelete */
export type CredentialDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of CredentialDelete. */
export type CredentialDeletePayload = {
  __typename?: 'CredentialDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  currentUser: CurrentUser;
};

/** Autogenerated input type of CredentialLoginStart */
export type CredentialLoginStartInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
};

/** Autogenerated return type of CredentialLoginStart. */
export type CredentialLoginStartPayload = {
  __typename?: 'CredentialLoginStartPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  options: Scalars['JSON']['output'];
};

/** Autogenerated input type of CredentialRegister */
export type CredentialRegisterInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  device: Scalars['String']['input'];
  response: Scalars['JSON']['input'];
};

/** Autogenerated return type of CredentialRegister. */
export type CredentialRegisterPayload = {
  __typename?: 'CredentialRegisterPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  currentUser: CurrentUser;
};

/** Autogenerated input type of CredentialRegistrationStart */
export type CredentialRegistrationStartInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CredentialRegistrationStart. */
export type CredentialRegistrationStartPayload = {
  __typename?: 'CredentialRegistrationStartPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  options: Scalars['JSON']['output'];
};

export type Currency = {
  __typename?: 'Currency';
  code: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  decimalDigits: Scalars['Int']['output'];
  exchangeRate: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  symbol: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type CurrencyExchangeRateArgs = {
  date?: InputMaybe<Scalars['ISO8601Date']['input']>;
  to: Scalars['ID']['input'];
};

export type CurrentUser = {
  __typename?: 'CurrentUser';
  createdAt: Scalars['ISO8601DateTime']['output'];
  defaultAccount?: Maybe<Account>;
  defaultCurrency?: Maybe<Currency>;
  email: Scalars['String']['output'];
  favouriteCurrencies: Array<Currency>;
  id: Scalars['ID']['output'];
  registeredCredentials: Array<UserCredential>;
  token: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of CurrentUserUpdate */
export type CurrentUserUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  userInput: UserInput;
};

/** Autogenerated return type of CurrentUserUpdate. */
export type CurrentUserUpdatePayload = {
  __typename?: 'CurrentUserUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  currentUser: CurrentUser;
};

export type DailyTransactions = {
  __typename?: 'DailyTransactions';
  date: Scalars['ISO8601Date']['output'];
  totalSpent: Money;
  transactions: Array<Transaction>;
};


export type DailyTransactionsTotalSpentArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated input type of FavouriteCurrencyToggle */
export type FavouriteCurrencyToggleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  favourite: Scalars['Boolean']['input'];
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of FavouriteCurrencyToggle. */
export type FavouriteCurrencyTogglePayload = {
  __typename?: 'FavouriteCurrencyTogglePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  currentUser: CurrentUser;
};

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password?: InputMaybe<Scalars['String']['input']>;
  webauthnResponse?: InputMaybe<Scalars['JSON']['input']>;
};

/** Autogenerated return type of Login. */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  user: CurrentUser;
};

export type Money = {
  __typename?: 'Money';
  amountCents: Scalars['Int']['output'];
  amountDecimal: Scalars['Float']['output'];
  formatted: Scalars['String']['output'];
  formattedShort: Scalars['String']['output'];
};

export type MonthBalance = {
  __typename?: 'MonthBalance';
  difference: Money;
  id: Scalars['String']['output'];
  income: Money;
  month: Scalars['Int']['output'];
  totalSpending: Money;
  year: Scalars['Int']['output'];
};

export type MonthBudget = {
  __typename?: 'MonthBudget';
  difference: Money;
  id: Scalars['ID']['output'];
  income: Money;
  irregularCategories: CategoryBudgetGroup;
  month: Scalars['Int']['output'];
  regularCategories: CategoryBudgetGroup;
  totalSpending: Money;
  year: Scalars['Int']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Archives a account by ID */
  accountArchive: AccountArchivePayload;
  /** Creates a new account */
  accountCreate: AccountCreatePayload;
  /** Deletes a account by ID */
  accountDelete: AccountDeletePayload;
  /** Updates a account by id */
  accountUpdate: AccountUpdatePayload;
  /** Reorders accounts */
  accountsReorder: AccountsReorderPayload;
  /** Reorders categories */
  categoriesReorder: CategoriesReorderPayload;
  /** Archives a category by ID */
  categoryArchive: CategoryArchivePayload;
  /** Creates a new category */
  categoryCreate: CategoryCreatePayload;
  /** Deletes a category by ID */
  categoryDelete: CategoryDeletePayload;
  /** Updates a category by id */
  categoryUpdate: CategoryUpdatePayload;
  credentialDelete: CredentialDeletePayload;
  credentialLoginStart: CredentialLoginStartPayload;
  credentialRegister: CredentialRegisterPayload;
  credentialRegistrationStart: CredentialRegistrationStartPayload;
  /** Updates the current user */
  currentUserUpdate: CurrentUserUpdatePayload;
  favouriteCurrencyToggle: FavouriteCurrencyTogglePayload;
  login: LoginPayload;
  /** Creates a new transaction */
  transactionCreate: TransactionCreatePayload;
  /** Deletes a transaction by ID */
  transactionDelete: TransactionDeletePayload;
  transactionSplit: TransactionSplitPayload;
  /** Updates a transaction by id */
  transactionUpdate: TransactionUpdatePayload;
};


export type MutationAccountArchiveArgs = {
  input: AccountArchiveInput;
};


export type MutationAccountCreateArgs = {
  input: AccountCreateInput;
};


export type MutationAccountDeleteArgs = {
  input: AccountDeleteInput;
};


export type MutationAccountUpdateArgs = {
  input: AccountUpdateInput;
};


export type MutationAccountsReorderArgs = {
  input: AccountsReorderInput;
};


export type MutationCategoriesReorderArgs = {
  input: CategoriesReorderInput;
};


export type MutationCategoryArchiveArgs = {
  input: CategoryArchiveInput;
};


export type MutationCategoryCreateArgs = {
  input: CategoryCreateInput;
};


export type MutationCategoryDeleteArgs = {
  input: CategoryDeleteInput;
};


export type MutationCategoryUpdateArgs = {
  input: CategoryUpdateInput;
};


export type MutationCredentialDeleteArgs = {
  input: CredentialDeleteInput;
};


export type MutationCredentialLoginStartArgs = {
  input: CredentialLoginStartInput;
};


export type MutationCredentialRegisterArgs = {
  input: CredentialRegisterInput;
};


export type MutationCredentialRegistrationStartArgs = {
  input: CredentialRegistrationStartInput;
};


export type MutationCurrentUserUpdateArgs = {
  input: CurrentUserUpdateInput;
};


export type MutationFavouriteCurrencyToggleArgs = {
  input: FavouriteCurrencyToggleInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationTransactionCreateArgs = {
  input: TransactionCreateInput;
};


export type MutationTransactionDeleteArgs = {
  input: TransactionDeleteInput;
};


export type MutationTransactionSplitArgs = {
  input: TransactionSplitInput;
};


export type MutationTransactionUpdateArgs = {
  input: TransactionUpdateInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Query = {
  __typename?: 'Query';
  account?: Maybe<Account>;
  accounts: Array<Account>;
  balance: AnnualBalance;
  budget: MonthBudget;
  categories: Array<Category>;
  category?: Maybe<Category>;
  currencies: Array<Currency>;
  currency?: Maybe<Currency>;
  currentUser: CurrentUser;
  transaction?: Maybe<Transaction>;
  transactions: TransactionConnection;
  transactionsByDay: Array<DailyTransactions>;
};


export type QueryAccountArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAccountsArgs = {
  archived?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryBalanceArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  year: Scalars['Int']['input'];
};


export type QueryBudgetArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  month: Scalars['Int']['input'];
  year: Scalars['Int']['input'];
};


export type QueryCategoriesArgs = {
  archived?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type QueryCurrencyArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTransactionArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTransactionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TransactionFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryTransactionsByDayArgs = {
  dateFrom: Scalars['ISO8601Date']['input'];
  dateUntil: Scalars['ISO8601Date']['input'];
};

export type Transaction = {
  __typename?: 'Transaction';
  account: Account;
  amount?: Maybe<Money>;
  category?: Maybe<Category>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Currency>;
  date: Scalars['ISO8601Date']['output'];
  id: Scalars['ID']['output'];
  includeInReports: Scalars['Boolean']['output'];
  memo: Scalars['String']['output'];
  shop: Scalars['String']['output'];
  shopAmount?: Maybe<Money>;
  shopCurrency?: Maybe<Currency>;
  splitFrom?: Maybe<Transaction>;
  splitTo: Array<Transaction>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type TransactionAmountArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
};


export type TransactionShopAmountArgs = {
  currencyId?: InputMaybe<Scalars['ID']['input']>;
};

/** The connection type for Transaction. */
export type TransactionConnection = {
  __typename?: 'TransactionConnection';
  /** A list of edges. */
  edges: Array<TransactionEdge>;
  /** A list of nodes. */
  nodes: Array<Transaction>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** Autogenerated input type of TransactionCreate */
export type TransactionCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  transactionInput: TransactionInput;
};

/** Autogenerated return type of TransactionCreate. */
export type TransactionCreatePayload = {
  __typename?: 'TransactionCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  transaction: Transaction;
};

/** Autogenerated input type of TransactionDelete */
export type TransactionDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of TransactionDelete. */
export type TransactionDeletePayload = {
  __typename?: 'TransactionDeletePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  transaction: Transaction;
};

/** An edge in a connection. */
export type TransactionEdge = {
  __typename?: 'TransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Transaction>;
};

export type TransactionFilterInput = {
  categoryIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  dateFrom?: InputMaybe<Scalars['ISO8601Date']['input']>;
  dateUntil?: InputMaybe<Scalars['ISO8601Date']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
  maxAmountCents?: InputMaybe<Scalars['Int']['input']>;
  minAmountCents?: InputMaybe<Scalars['Int']['input']>;
};

export type TransactionInput = {
  accountId?: InputMaybe<Scalars['ID']['input']>;
  amountCents?: InputMaybe<Scalars['Int']['input']>;
  categoryId?: InputMaybe<Scalars['ID']['input']>;
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  date?: InputMaybe<Scalars['ISO8601Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  includeInReports?: InputMaybe<Scalars['Boolean']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  shop?: InputMaybe<Scalars['String']['input']>;
  shopAmountCents?: InputMaybe<Scalars['Int']['input']>;
  shopCurrencyId?: InputMaybe<Scalars['ID']['input']>;
  splitFromId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated input type of TransactionSplit */
export type TransactionSplitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  splits: Array<TransactionSplitItemInput>;
};

export type TransactionSplitItemInput = {
  amountCents: Scalars['Int']['input'];
  categoryId?: InputMaybe<Scalars['String']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of TransactionSplit. */
export type TransactionSplitPayload = {
  __typename?: 'TransactionSplitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  transaction: Transaction;
};

/** Autogenerated input type of TransactionUpdate */
export type TransactionUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  transactionInput: TransactionInput;
};

/** Autogenerated return type of TransactionUpdate. */
export type TransactionUpdatePayload = {
  __typename?: 'TransactionUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  transaction: Transaction;
};

export type UserCredential = {
  __typename?: 'UserCredential';
  createdAt: Scalars['ISO8601DateTime']['output'];
  device: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type UserInput = {
  defaultAccountId?: InputMaybe<Scalars['ID']['input']>;
  defaultCurrencyId?: InputMaybe<Scalars['ID']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  newPassword?: InputMaybe<Scalars['String']['input']>;
  oldPassword?: InputMaybe<Scalars['String']['input']>;
};

export type FullAccountFragment = { __typename?: 'Account', id: string, name: string, hasTransactions: boolean, favourite: boolean, sortOrder: number, currency: { __typename?: 'Currency', id: string, code: string } };

export type FullCategoryFragment = { __typename?: 'Category', id: string, name: string, color: string, icon: string, hasTransactions: boolean, isRegular: boolean, sortOrder: number, createdAt: any, updatedAt: any, budget?: { __typename?: 'CategoryBudget', budget: { __typename?: 'Money', amountDecimal: number, formatted: string }, currency: { __typename?: 'Currency', id: string } } | null };

export type FullCurrencyFragment = { __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number };

export type FullCurrentUserFragment = { __typename?: 'CurrentUser', id: string, email: string, defaultCurrency?: { __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number } | null, favouriteCurrencies: Array<{ __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number }>, defaultAccount?: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string } } | null, registeredCredentials: Array<{ __typename?: 'UserCredential', id: string, device: string, createdAt: any }> };

export type FullTransactionFragment = { __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string, code: string, symbol: string, decimalDigits: number } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string, code: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> };

export type ListingTransactionFragment = { __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> };

export type ArchiveAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ArchiveAccountMutation = { __typename?: 'Mutation', accountArchive: { __typename?: 'AccountArchivePayload', account: { __typename?: 'Account', id: string } } };

export type ArchiveCategoryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ArchiveCategoryMutation = { __typename?: 'Mutation', categoryArchive: { __typename?: 'CategoryArchivePayload', category: { __typename?: 'Category', id: string } } };

export type CreateAccountMutationVariables = Exact<{
  input: AccountInput;
}>;


export type CreateAccountMutation = { __typename?: 'Mutation', accountCreate: { __typename?: 'AccountCreatePayload', account: { __typename?: 'Account', id: string } } };

export type CreateCategoryMutationVariables = Exact<{
  input: CategoryInput;
}>;


export type CreateCategoryMutation = { __typename?: 'Mutation', categoryCreate: { __typename?: 'CategoryCreatePayload', category: { __typename?: 'Category', id: string } } };

export type CreateTransactionMutationVariables = Exact<{
  input: TransactionInput;
}>;


export type CreateTransactionMutation = { __typename?: 'Mutation', transactionCreate: { __typename?: 'TransactionCreatePayload', transaction: { __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string, code: string, symbol: string, decimalDigits: number } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string, code: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> } } };

export type DeleteAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteAccountMutation = { __typename?: 'Mutation', accountDelete: { __typename?: 'AccountDeletePayload', account: { __typename?: 'Account', id: string } } };

export type DeleteCategoryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCategoryMutation = { __typename?: 'Mutation', categoryDelete: { __typename?: 'CategoryDeletePayload', category: { __typename?: 'Category', id: string } } };

export type DeleteCredentialMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCredentialMutation = { __typename?: 'Mutation', credentialDelete: { __typename?: 'CredentialDeletePayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type DeleteTransactionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteTransactionMutation = { __typename?: 'Mutation', transactionDelete: { __typename?: 'TransactionDeletePayload', transaction: { __typename?: 'Transaction', id: string } } };

export type FavouriteAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FavouriteAccountMutation = { __typename?: 'Mutation', accountUpdate: { __typename?: 'AccountUpdatePayload', account: { __typename?: 'Account', id: string } } };

export type FavouriteCurrencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FavouriteCurrencyMutation = { __typename?: 'Mutation', favouriteCurrencyToggle: { __typename?: 'FavouriteCurrencyTogglePayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type GenerateCredentialLoginOptionsMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type GenerateCredentialLoginOptionsMutation = { __typename?: 'Mutation', credentialLoginStart: { __typename?: 'CredentialLoginStartPayload', options: any } };

export type LoginMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'LoginPayload', user: { __typename?: 'CurrentUser', token: string, email: string } } };

export type LoginViaCredentialMutationVariables = Exact<{
  email: Scalars['String']['input'];
  response: Scalars['JSON']['input'];
}>;


export type LoginViaCredentialMutation = { __typename?: 'Mutation', login: { __typename?: 'LoginPayload', user: { __typename?: 'CurrentUser', token: string, email: string } } };

export type RegisterCredentialMutationVariables = Exact<{ [key: string]: never; }>;


export type RegisterCredentialMutation = { __typename?: 'Mutation', credentialRegistrationStart: { __typename?: 'CredentialRegistrationStartPayload', options: any } };

export type ReorderAccountsMutationVariables = Exact<{
  orderedIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type ReorderAccountsMutation = { __typename?: 'Mutation', accountsReorder: { __typename?: 'AccountsReorderPayload', accounts: Array<{ __typename?: 'Account', id: string }> } };

export type ReorderCategoriesMutationVariables = Exact<{
  orderedIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type ReorderCategoriesMutation = { __typename?: 'Mutation', categoriesReorder: { __typename?: 'CategoriesReorderPayload', categories: Array<{ __typename?: 'Category', id: string }> } };

export type SetDefaultAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SetDefaultAccountMutation = { __typename?: 'Mutation', currentUserUpdate: { __typename?: 'CurrentUserUpdatePayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type SetDefaultCurrencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SetDefaultCurrencyMutation = { __typename?: 'Mutation', currentUserUpdate: { __typename?: 'CurrentUserUpdatePayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type SplitTransactionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  splits: Array<TransactionSplitItemInput> | TransactionSplitItemInput;
}>;


export type SplitTransactionMutation = { __typename?: 'Mutation', transactionSplit: { __typename?: 'TransactionSplitPayload', transaction: { __typename?: 'Transaction', id: string } } };

export type UnfavouriteAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UnfavouriteAccountMutation = { __typename?: 'Mutation', accountUpdate: { __typename?: 'AccountUpdatePayload', account: { __typename?: 'Account', id: string } } };

export type UnfavouriteCurrencyMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UnfavouriteCurrencyMutation = { __typename?: 'Mutation', favouriteCurrencyToggle: { __typename?: 'FavouriteCurrencyTogglePayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type UpdateAccountMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: AccountInput;
}>;


export type UpdateAccountMutation = { __typename?: 'Mutation', accountUpdate: { __typename?: 'AccountUpdatePayload', account: { __typename?: 'Account', id: string } } };

export type UpdateCategoryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: CategoryInput;
}>;


export type UpdateCategoryMutation = { __typename?: 'Mutation', categoryUpdate: { __typename?: 'CategoryUpdatePayload', category: { __typename?: 'Category', id: string } } };

export type UpdateTransactionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: TransactionInput;
}>;


export type UpdateTransactionMutation = { __typename?: 'Mutation', transactionUpdate: { __typename?: 'TransactionUpdatePayload', transaction: { __typename?: 'Transaction', id: string } } };

export type VerifyCredentialRegistrationMutationVariables = Exact<{
  response: Scalars['JSON']['input'];
  device: Scalars['String']['input'];
}>;


export type VerifyCredentialRegistrationMutation = { __typename?: 'Mutation', credentialRegister: { __typename?: 'CredentialRegisterPayload', currentUser: { __typename?: 'CurrentUser', id: string } } };

export type AccountsQueryVariables = Exact<{
  archived: Scalars['Boolean']['input'];
}>;


export type AccountsQuery = { __typename?: 'Query', accounts: Array<{ __typename?: 'Account', id: string, name: string, hasTransactions: boolean, favourite: boolean, sortOrder: number, currency: { __typename?: 'Currency', id: string, code: string } }> };

export type BalanceQueryVariables = Exact<{
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  year: Scalars['Int']['input'];
}>;


export type BalanceQuery = { __typename?: 'Query', balance: { __typename?: 'AnnualBalance', currency: { __typename?: 'Currency', symbol: string }, income: { __typename?: 'Money', amountDecimal: number, formatted: string }, totalSpending: { __typename?: 'Money', amountDecimal: number, formatted: string }, difference: { __typename?: 'Money', amountDecimal: number, formatted: string }, months: Array<{ __typename?: 'MonthBalance', month: number, income: { __typename?: 'Money', amountDecimal: number, formatted: string }, totalSpending: { __typename?: 'Money', amountDecimal: number, formatted: string }, difference: { __typename?: 'Money', amountDecimal: number, formatted: string } }> } };

export type BudgetQueryVariables = Exact<{
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  year: Scalars['Int']['input'];
  month: Scalars['Int']['input'];
  monthStart: Scalars['ISO8601Date']['input'];
  monthEnd: Scalars['ISO8601Date']['input'];
}>;


export type BudgetQuery = { __typename?: 'Query', budget: { __typename?: 'MonthBudget', id: string, month: number, income: { __typename?: 'Money', amountDecimal: number, formatted: string }, totalSpending: { __typename?: 'Money', amountDecimal: number, formatted: string }, difference: { __typename?: 'Money', amountDecimal: number, formatted: string }, regularCategories: { __typename?: 'CategoryBudgetGroup', totalSpending: { __typename?: 'Money', amountDecimal: number, formatted: string }, categories: Array<{ __typename?: 'CategoryBudgetSpending', id: string, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string, isRegular: boolean, budget?: { __typename?: 'CategoryBudget', budget: { __typename?: 'Money', amountDecimal: number, formatted: string } } | null } | null, amountSpent: { __typename?: 'Money', amountDecimal: number, formatted: string }, remainingBudget?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null }> }, irregularCategories: { __typename?: 'CategoryBudgetGroup', totalSpending: { __typename?: 'Money', amountDecimal: number, formatted: string }, categories: Array<{ __typename?: 'CategoryBudgetSpending', id: string, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string, isRegular: boolean, budget?: { __typename?: 'CategoryBudget', budget: { __typename?: 'Money', amountDecimal: number, formatted: string } } | null } | null, amountSpent: { __typename?: 'Money', amountDecimal: number, formatted: string }, remainingBudget?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null }> } }, income: { __typename?: 'TransactionConnection', nodes: Array<{ __typename?: 'Transaction', id: string, shop: string, memo: string, amount?: { __typename?: 'Money', formatted: string, amountDecimal: number } | null }> } };

export type CategoriesQueryVariables = Exact<{
  archived: Scalars['Boolean']['input'];
  today: Scalars['ISO8601Date']['input'];
}>;


export type CategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'Category', id: string, name: string, color: string, icon: string, hasTransactions: boolean, isRegular: boolean, sortOrder: number, createdAt: any, updatedAt: any, budget?: { __typename?: 'CategoryBudget', budget: { __typename?: 'Money', amountDecimal: number, formatted: string }, currency: { __typename?: 'Currency', id: string } } | null }> };

export type CurrenciesQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrenciesQuery = { __typename?: 'Query', currencies: Array<{ __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number }> };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser: { __typename?: 'CurrentUser', id: string, email: string, defaultCurrency?: { __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number } | null, favouriteCurrencies: Array<{ __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number }>, defaultAccount?: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string } } | null, registeredCredentials: Array<{ __typename?: 'UserCredential', id: string, device: string, createdAt: any }> } };

export type GetAccountQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetAccountQuery = { __typename?: 'Query', account?: { __typename?: 'Account', id: string, name: string, hasTransactions: boolean, favourite: boolean, sortOrder: number, currency: { __typename?: 'Currency', id: string, code: string } } | null };

export type GetCategoryQueryVariables = Exact<{
  id: Scalars['ID']['input'];
  today: Scalars['ISO8601Date']['input'];
}>;


export type GetCategoryQuery = { __typename?: 'Query', category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string, hasTransactions: boolean, isRegular: boolean, sortOrder: number, createdAt: any, updatedAt: any, budget?: { __typename?: 'CategoryBudget', budget: { __typename?: 'Money', amountDecimal: number, formatted: string }, currency: { __typename?: 'Currency', id: string } } | null } | null };

export type GetCurrencyQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCurrencyQuery = { __typename?: 'Query', currency?: { __typename?: 'Currency', id: string, code: string, name: string, symbol: string, decimalDigits: number } | null };

export type GetTransactionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetTransactionQuery = { __typename?: 'Query', transaction?: { __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string, code: string, symbol: string, decimalDigits: number } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string, code: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> } | null };

export type TransactionsByDayQueryVariables = Exact<{
  currencyId?: InputMaybe<Scalars['ID']['input']>;
  dateFrom: Scalars['ISO8601Date']['input'];
  dateUntil: Scalars['ISO8601Date']['input'];
}>;


export type TransactionsByDayQuery = { __typename?: 'Query', transactionsByDay: Array<{ __typename?: 'DailyTransactions', date: any, totalSpent: { __typename?: 'Money', formattedShort: string }, transactions: Array<{ __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> }> }> };

export type TransactionsForPopulationQueryVariables = Exact<{ [key: string]: never; }>;


export type TransactionsForPopulationQuery = { __typename?: 'Query', transactions: { __typename?: 'TransactionConnection', nodes: Array<{ __typename?: 'Transaction', id: string, shop: string, memo: string, account: { __typename?: 'Account', id: string, currency: { __typename?: 'Currency', id: string } }, category?: { __typename?: 'Category', id: string } | null }> } };

export type TransactionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TransactionFilterInput>;
}>;


export type TransactionsQuery = { __typename?: 'Query', transactions: { __typename?: 'TransactionConnection', nodes: Array<{ __typename?: 'Transaction', id: string, shop: string, memo: string, date: any, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, currency?: { __typename?: 'Currency', id: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopCurrency?: { __typename?: 'Currency', id: string } | null, category?: { __typename?: 'Category', id: string, name: string, color: string, icon: string } | null, account: { __typename?: 'Account', id: string, name: string, currency: { __typename?: 'Currency', id: string } }, splitTo: Array<{ __typename?: 'Transaction', id: string, memo: string, includeInReports: boolean, amount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, shopAmount?: { __typename?: 'Money', amountDecimal: number, formatted: string } | null, category?: { __typename?: 'Category', id: string, name: string, icon: string, color: string } | null }> }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null } } };
