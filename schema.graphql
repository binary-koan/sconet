type Account {
  createdAt: ISO8601DateTime!
  currency: Currency!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AccountCreate
"""
input AccountCreateInput {
  accountInput: AccountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AccountCreate.
"""
type AccountCreatePayload {
  account: Account!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AccountDelete
"""
input AccountDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of AccountDelete.
"""
type AccountDeletePayload {
  account: Account!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input AccountInput {
  currencyId: ID
  name: String
}

"""
Autogenerated input type of AccountUpdate
"""
input AccountUpdateInput {
  accountInput: AccountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of AccountUpdate.
"""
type AccountUpdatePayload {
  account: Account!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type AnnualBalance {
  currency: Currency!
  difference: Money!
  id: ID!
  income: Money!
  months: [MonthBalance!]!
  totalSpending: Money!
  year: Int!
}

"""
Autogenerated input type of CategoriesReorder
"""
input CategoriesReorderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  orderedIds: [ID!]!
}

"""
Autogenerated return type of CategoriesReorder.
"""
type CategoriesReorderPayload {
  categories: [Category!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Category {
  budget(date: ISO8601Date!): CategoryBudget
  budgets: [CategoryBudget!]!
  color: String!
  createdAt: ISO8601DateTime!
  icon: String!
  id: ID!
  isRegular: Boolean!
  name: String!
  sortOrder: Int!
  updatedAt: ISO8601DateTime!
}

type CategoryBudget {
  budget(currencyId: ID, date: ISO8601Date): Money!
  createdAt: ISO8601DateTime!
  currency: Currency!
  dateFrom: ISO8601Date!
  dateTo: ISO8601Date
  id: ID!
  updatedAt: ISO8601DateTime!
}

type CategoryBudgetGroup {
  categories: [CategoryBudgetSpending!]!
  totalSpending: Money!
}

type CategoryBudgetSpending {
  amountSpent: Money!
  category: Category
  id: ID!
  remainingBudget: Money
}

"""
Autogenerated input type of CategoryCreate
"""
input CategoryCreateInput {
  categoryInput: CategoryInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CategoryCreate.
"""
type CategoryCreatePayload {
  category: Category!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CategoryDelete
"""
input CategoryDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of CategoryDelete.
"""
type CategoryDeletePayload {
  category: Category!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input CategoryInput {
  budgetCents: Int
  budgetCurrencyId: ID
  color: String
  icon: String
  isRegular: Boolean
  name: String
}

"""
Autogenerated input type of CategoryUpdate
"""
input CategoryUpdateInput {
  categoryInput: CategoryInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of CategoryUpdate.
"""
type CategoryUpdatePayload {
  category: Category!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CredentialDelete
"""
input CredentialDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of CredentialDelete.
"""
type CredentialDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser!
}

"""
Autogenerated input type of CredentialLoginStart
"""
input CredentialLoginStartInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of CredentialLoginStart.
"""
type CredentialLoginStartPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  options: JSON!
}

"""
Autogenerated input type of CredentialRegister
"""
input CredentialRegisterInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  device: String!
  response: JSON!
}

"""
Autogenerated return type of CredentialRegister.
"""
type CredentialRegisterPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser!
}

"""
Autogenerated input type of CredentialRegistrationStart
"""
input CredentialRegistrationStartInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CredentialRegistrationStart.
"""
type CredentialRegistrationStartPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  options: JSON!
}

type Currency {
  code: String!
  createdAt: ISO8601DateTime!
  decimalDigits: Int!
  exchangeRate(date: ISO8601Date, to: ID!): Float!
  id: ID!
  name: String!
  symbol: String!
  updatedAt: ISO8601DateTime!
}

type CurrentUser {
  createdAt: ISO8601DateTime!
  defaultAccount: Account
  defaultCurrency: Currency
  email: String!
  favouriteCurrencies: [Currency!]!
  id: ID!
  registeredCredentials: [UserCredential!]!
  token: String!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CurrentUserUpdate
"""
input CurrentUserUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userInput: UserInput!
}

"""
Autogenerated return type of CurrentUserUpdate.
"""
type CurrentUserUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser!
}

type DailyTransactions {
  date: ISO8601Date!
  totalSpent(currencyId: ID): Money!
  transactions: [Transaction!]!
}

"""
Autogenerated input type of FavouriteCurrencyToggle
"""
input FavouriteCurrencyToggleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  favourite: Boolean!
  id: ID!
}

"""
Autogenerated return type of FavouriteCurrencyToggle.
"""
type FavouriteCurrencyTogglePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String
  webauthnResponse: JSON
}

"""
Autogenerated return type of Login.
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: CurrentUser!
}

type Money {
  amountCents: Int!
  amountDecimal: Float!
  formatted: String!
  formattedShort: String!
}

type MonthBalance {
  difference: Money!
  id: String!
  income: Money!
  month: Int!
  totalSpending: Money!
  year: Int!
}

type MonthBudget {
  difference: Money!
  id: ID!
  income: Money!
  irregularCategories: CategoryBudgetGroup!
  month: Int!
  regularCategories: CategoryBudgetGroup!
  totalSpending: Money!
  year: Int!
}

type Mutation {
  """
  Creates a new account
  """
  accountCreate(
    """
    Parameters for AccountCreate
    """
    input: AccountCreateInput!
  ): AccountCreatePayload!

  """
  Deletes a account by ID
  """
  accountDelete(
    """
    Parameters for AccountDelete
    """
    input: AccountDeleteInput!
  ): AccountDeletePayload!

  """
  Updates a account by id
  """
  accountUpdate(
    """
    Parameters for AccountUpdate
    """
    input: AccountUpdateInput!
  ): AccountUpdatePayload!

  """
  Reorders categories
  """
  categoriesReorder(
    """
    Parameters for CategoriesReorder
    """
    input: CategoriesReorderInput!
  ): CategoriesReorderPayload!

  """
  Creates a new category
  """
  categoryCreate(
    """
    Parameters for CategoryCreate
    """
    input: CategoryCreateInput!
  ): CategoryCreatePayload!

  """
  Deletes a category by ID
  """
  categoryDelete(
    """
    Parameters for CategoryDelete
    """
    input: CategoryDeleteInput!
  ): CategoryDeletePayload!

  """
  Updates a category by id
  """
  categoryUpdate(
    """
    Parameters for CategoryUpdate
    """
    input: CategoryUpdateInput!
  ): CategoryUpdatePayload!
  credentialDelete(
    """
    Parameters for CredentialDelete
    """
    input: CredentialDeleteInput!
  ): CredentialDeletePayload!
  credentialLoginStart(
    """
    Parameters for CredentialLoginStart
    """
    input: CredentialLoginStartInput!
  ): CredentialLoginStartPayload!
  credentialRegister(
    """
    Parameters for CredentialRegister
    """
    input: CredentialRegisterInput!
  ): CredentialRegisterPayload!
  credentialRegistrationStart(
    """
    Parameters for CredentialRegistrationStart
    """
    input: CredentialRegistrationStartInput!
  ): CredentialRegistrationStartPayload!

  """
  Updates the current user
  """
  currentUserUpdate(
    """
    Parameters for CurrentUserUpdate
    """
    input: CurrentUserUpdateInput!
  ): CurrentUserUpdatePayload!
  favouriteCurrencyToggle(
    """
    Parameters for FavouriteCurrencyToggle
    """
    input: FavouriteCurrencyToggleInput!
  ): FavouriteCurrencyTogglePayload!
  login(
    """
    Parameters for Login
    """
    input: LoginInput!
  ): LoginPayload!

  """
  Creates a new transaction
  """
  transactionCreate(
    """
    Parameters for TransactionCreate
    """
    input: TransactionCreateInput!
  ): TransactionCreatePayload!

  """
  Deletes a transaction by ID
  """
  transactionDelete(
    """
    Parameters for TransactionDelete
    """
    input: TransactionDeleteInput!
  ): TransactionDeletePayload!
  transactionSplit(
    """
    Parameters for TransactionSplit
    """
    input: TransactionSplitInput!
  ): TransactionSplitPayload!

  """
  Updates a transaction by id
  """
  transactionUpdate(
    """
    Parameters for TransactionUpdate
    """
    input: TransactionUpdateInput!
  ): TransactionUpdatePayload!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  account(id: ID!): Account
  accounts: [Account!]!
  balance(currencyId: ID, year: Int!): AnnualBalance!
  budget(currencyId: ID, month: Int!, year: Int!): MonthBudget!
  categories: [Category!]!
  category(id: ID!): Category
  currencies: [Currency!]!
  currency(id: ID!): Currency
  currentUser: CurrentUser!
  transaction(id: ID!): Transaction
  transactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: TransactionFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TransactionConnection!
  transactionsByDay(dateFrom: ISO8601Date!, dateUntil: ISO8601Date!): [DailyTransactions!]!
}

type Transaction {
  account: Account!
  amount(currencyId: ID): Money
  category: Category
  createdAt: ISO8601DateTime!
  currency: Currency
  date: ISO8601Date!
  id: ID!
  includeInReports: Boolean!
  memo: String!
  shop: String!
  shopAmount(currencyId: ID): Money
  shopCurrency: Currency
  splitFrom: Transaction
  splitTo: [Transaction!]!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Transaction.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Transaction!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of TransactionCreate
"""
input TransactionCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transactionInput: TransactionInput!
}

"""
Autogenerated return type of TransactionCreate.
"""
type TransactionCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
Autogenerated input type of TransactionDelete
"""
input TransactionDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of TransactionDelete.
"""
type TransactionDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Transaction
}

input TransactionFilterInput {
  categoryIds: [ID]
  dateFrom: ISO8601Date
  dateUntil: ISO8601Date
  keyword: String
  maxAmountCents: Int
  minAmountCents: Int
}

input TransactionInput {
  accountId: ID
  amountCents: Int
  categoryId: ID
  currencyId: ID
  date: ISO8601Date
  id: ID
  includeInReports: Boolean
  memo: String
  shop: String
  shopAmountCents: Int
  shopCurrencyId: ID
  splitFromId: ID
}

"""
Autogenerated input type of TransactionSplit
"""
input TransactionSplitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  splits: [TransactionSplitItemInput!]!
}

input TransactionSplitItemInput {
  amountCents: Int!
  categoryId: String
  memo: String
}

"""
Autogenerated return type of TransactionSplit.
"""
type TransactionSplitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
Autogenerated input type of TransactionUpdate
"""
input TransactionUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  transactionInput: TransactionInput!
}

"""
Autogenerated return type of TransactionUpdate.
"""
type TransactionUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

type UserCredential {
  createdAt: ISO8601DateTime!
  device: String!
  id: ID!
  updatedAt: ISO8601DateTime!
}

input UserInput {
  defaultAccountId: ID
  defaultCurrencyId: ID
  email: String
  newPassword: String
  oldPassword: String
}
